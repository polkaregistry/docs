(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{77:function(e,i,t){"use strict";t.r(i),t.d(i,"frontMatter",(function(){return o})),t.d(i,"metadata",(function(){return s})),t.d(i,"toc",(function(){return l})),t.d(i,"default",(function(){return c}));var n=t(3),r=t(7),a=(t(0),t(90)),o={title:"Architecture"},s={unversionedId:"architecture",id:"architecture",isDocsHomePage:!1,title:"Architecture",description:"This article documents the architecture of the proposed identity registrar on",source:"@site/docs/architecture.md",slug:"/architecture",permalink:"/docs/architecture",editUrl:"https://github.com/polkaregistry/docs/edit/master/website/docs/architecture.md",version:"current",sidebar:"docs",previous:{title:"Overview",permalink:"/docs/"},next:{title:"Common-good parachain",permalink:"/docs/vision/parachain"}},l=[{value:"Definitions",id:"definitions",children:[]},{value:"Workflows",id:"workflows",children:[{value:"Initialize a new verification or re-verify an existing verification",id:"initialize-a-new-verification-or-re-verify-an-existing-verification",children:[]},{value:"Re-verify an existing verficiation without data change",id:"re-verify-an-existing-verficiation-without-data-change",children:[]},{value:"Remove verification data",id:"remove-verification-data",children:[]},{value:"Remove expired invalid verifications",id:"remove-expired-invalid-verifications",children:[]}]},{value:"Verification items",id:"verification-items",children:[{value:"<code>github</code>",id:"github",children:[]},{value:"<code>web</code>",id:"web",children:[]},{value:"<code>twitter</code>",id:"twitter",children:[]},{value:"<code>matrix</code>",id:"matrix",children:[]},{value:"<code>eeeid</code>",id:"eeeid",children:[]}]}],d={toc:l};function c(e){var i=e.components,t=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(n.a)({},d,t,{components:i,mdxType:"MDXLayout"}),Object(a.b)("p",null,"This article documents the architecture of the proposed identity registrar on\nPolkadot, maintained by Wei. In overview, we process all identity verification\nthrough Github's issues and pull requests interface, as it is the most familiar\nfor open source developers."),Object(a.b)("h2",{id:"definitions"},"Definitions"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Users"),": Those who wish to use the identity verification to verify their\nidentities. We assume the user has a Polkadot address, which we refer to as\nthe address of the user."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Identity registry"),": The database of all current available off-chain\nidentity verification data."),Object(a.b)("li",{parentName:"ul"},Object(a.b)("strong",{parentName:"li"},"Registrar bot"),": The bot that handles merging of pull requests for the\nregistrar.")),Object(a.b)("h2",{id:"workflows"},"Workflows"),Object(a.b)("p",null,"Below we document workflows of the identity registrar."),Object(a.b)("h3",{id:"initialize-a-new-verification-or-re-verify-an-existing-verification"},"Initialize a new verification or re-verify an existing verification"),Object(a.b)("p",null,"To initialize a new identity verification for an address, or to re-verify an\nverification after any information has changed, a user opens a new pull request\nagainst ",Object(a.b)("inlineCode",{parentName:"p"},"polkaregistry/registry")," repo. It should add or modify files in the repo\nof its address, in the format of ",Object(a.b)("inlineCode",{parentName:"p"},"polkadot/<address>/<item>"),". For example, a\nwebsite verification would be ",Object(a.b)("inlineCode",{parentName:"p"},"polkadot/<address>/<website>"),"."),Object(a.b)("p",null,"The PR should sets its title in the format of ",Object(a.b)("inlineCode",{parentName:"p"},"verification request: <address>"),".\nThe repo will be set up with Github Actions workflows, representing individual\nverification items, with the process verifying each items defined in the below\nsection."),Object(a.b)("p",null,"The registrar bot will then re-check the status of all verification items. Only if\nall of them passes, the bot will submit a transaction on-chain, seal the\nregistrar verification, and then merge the PR."),Object(a.b)("h3",{id:"re-verify-an-existing-verficiation-without-data-change"},"Re-verify an existing verficiation without data change"),Object(a.b)("p",null,"If no repo data change is needed but re-verification is required, then a user\nopens a new issue against ",Object(a.b)("inlineCode",{parentName:"p"},"polkaregistry/registry"),", with its title in the format\nof ",Object(a.b)("inlineCode",{parentName:"p"},"verification request: <address>"),". The registrar bot will then re-check the\nstatus of all existing verification items. If everything passes, it will submit\na transaction on-chain, seal the registrar verification, and then close the\nissue."),Object(a.b)("h3",{id:"remove-verification-data"},"Remove verification data"),Object(a.b)("p",null,"A user can submit new pull request removing verification data if it's no longer\nused, and the user can prove that it's the owner. They do this by having a\n",Object(a.b)("inlineCode",{parentName:"p"},"github")," verification item at ",Object(a.b)("inlineCode",{parentName:"p"},"polkadot/<address>/github")," which proves the\naddress' ownership of the submitter Github account."),Object(a.b)("h3",{id:"remove-expired-invalid-verifications"},"Remove expired invalid verifications"),Object(a.b)("p",null,"Periodically, the bot will run in the background, against all existing valid\nverifications on-chain. They will be verified again against the data in\n",Object(a.b)("inlineCode",{parentName:"p"},"polkaregistry/registry"),". If any address contains no-longer-valid verification\nitems, then the registrar bot will send a transaction to remove its verification\nseal. If an email is set, the registrar bot will send an email to notify the\nuser about the expired verification, and ask to re-submit a new verification."),Object(a.b)("h2",{id:"verification-items"},"Verification items"),Object(a.b)("p",null,"Note that all verification items are optional. Whether they are required to pass\nthe registrar verification depends on what the user sets for its identity\ninformation."),Object(a.b)("h3",{id:"github"},Object(a.b)("inlineCode",{parentName:"h3"},"github")),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"github")," verification indirectly proves the ownership of an email address. To\ndo this, the user uses its Polkadot address to sign the following message:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},'{\n    "app": "polkaregistry",\n    "version": 1,\n    "network": "polkadot",\n    "item": "github",\n    "handle": "<github handle>"\n}\n')),Object(a.b)("p",null,"The signed message is then published as a gist of the Github handle, and the\nuser should put the link of the gist to ",Object(a.b)("inlineCode",{parentName:"p"},"polkadot/<address>/github")," in\n",Object(a.b)("inlineCode",{parentName:"p"},"polkaregistry/registry")," repo."),Object(a.b)("h3",{id:"web"},Object(a.b)("inlineCode",{parentName:"h3"},"web")),Object(a.b)("p",null,"To verify a website ownership, the user uses its Polkadot address to sign the\nfollowing message:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},'{\n    "app": "polkaregistry",\n    "version": 1,\n    "network": "polkadot",\n    "item": "web",\n    "url": "<website url>"\n}\n')),Object(a.b)("p",null,"The signed message is then published in the website's root folder's\n",Object(a.b)("inlineCode",{parentName:"p"},".well-known/polkaregistry.txt"),". The user then puts the link to\n",Object(a.b)("inlineCode",{parentName:"p"},".well-known/polkaregistry.txt")," to ",Object(a.b)("inlineCode",{parentName:"p"},"polkadot/<address>/web")," in\n",Object(a.b)("inlineCode",{parentName:"p"},"polkaregistry/registry")," repo."),Object(a.b)("h3",{id:"twitter"},Object(a.b)("inlineCode",{parentName:"h3"},"twitter")),Object(a.b)("p",null,"To verify Twitter ownership, the user uses its Polkadot address to sign the\nfollowing message:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},'{\n    "app": "polkaregistry",\n    "version": 1,\n    "network": "polkadot",\n    "item": "twitter",\n    "handle": "<twitter handle>"\n}\n')),Object(a.b)("p",null,"The signed message is then published as a tweet under the particular Twitter\nhandle. The user then puts the link to the tweet to ",Object(a.b)("inlineCode",{parentName:"p"},"polkadot/<address>/twitter"),"\nin ",Object(a.b)("inlineCode",{parentName:"p"},"polkaregistry/registry")," repo."),Object(a.b)("h3",{id:"matrix"},Object(a.b)("inlineCode",{parentName:"h3"},"matrix")),Object(a.b)("p",null,"To verify Matrix account ownership, the user uses its Polkadot address to sign\nthe following message:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},'{\n    "app": "polkaregistry",\n    "version": 1,\n    "network": "polkadot",\n    "item": "matrix",\n    "handle": "<matrix handle>"\n}\n')),Object(a.b)("p",null,"The signed message is then published to the public Matrix room\n",Object(a.b)("inlineCode",{parentName:"p"},"#polkaregistry:matrix.org"),". The user then puts the event ID of the message to\n",Object(a.b)("inlineCode",{parentName:"p"},"polkadot/<address>/matrix")," in ",Object(a.b)("inlineCode",{parentName:"p"},"polkaregistry/registry")," repo."),Object(a.b)("h3",{id:"eeeid"},Object(a.b)("inlineCode",{parentName:"h3"},"eeeid")),Object(a.b)("p",null,"To verify the user's legal name using Estonia's eID program, the user first uses\nits Polkadot address to sign the following message:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre"},'{\n    "app": "polkaregistry",\n    "version": 1,\n    "network": "polkadot",\n    "item": "eeeid"\n}\n')),Object(a.b)("p",null,"The user should then use the DigiDoc signing application to sign the document\nwith the above signature, which results in a ",Object(a.b)("inlineCode",{parentName:"p"},".ascie")," file. The user should then\npublishes the ",Object(a.b)("inlineCode",{parentName:"p"},".ascie")," file in an URL or IPFS location. The URL or IPFS location,\ntogether with the ",Object(a.b)("inlineCode",{parentName:"p"},".ascie")," file's SHA-256 hash, should be published to\n",Object(a.b)("inlineCode",{parentName:"p"},"polkadot/<address>/eeeid")," in ",Object(a.b)("inlineCode",{parentName:"p"},"polkaregistry/registry")," repo."))}c.isMDXComponent=!0}}]);